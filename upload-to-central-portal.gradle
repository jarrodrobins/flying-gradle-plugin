buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.apache.httpcomponents.client5:httpclient5:5.3'
    }
}

import groovy.json.JsonSlurper
import org.apache.hc.client5.http.entity.mime.MultipartEntityBuilder
import org.apache.hc.client5.http.impl.classic.HttpClients
import org.apache.hc.core5.http.io.entity.EntityUtils
import org.apache.hc.core5.http.io.support.ClassicRequestBuilder

abstract class UploadToCentralPortal extends DefaultTask {

    @Input
    final String uploadUrl = 'https://central.sonatype.com/api/v1/publisher/upload?publishingType=AUTOMATIC'

    @Input
    final String statusUrl = 'https://central.sonatype.com/api/v1/publisher/status?id='

    @Optional
    @Input
    final String uploadToken = System.getenv('MAVEN_UPLOAD_TOKEN')

    @InputFile
    final abstract RegularFileProperty uploadFile = project.objects.fileProperty()

    @TaskAction
    void executeTask() {
        if (!uploadToken) {
            logger.error('Error when upload to Maven Central Portal, the upload token does not provided!')
            return
        }

        try (def httpclient = HttpClients.createDefault()) {
            def httpPost = ClassicRequestBuilder.post(uploadUrl)
                    .setHeader('Authorization', "Bearer ${uploadToken}")
                    .setEntity(MultipartEntityBuilder.create().addBinaryBody('bundle', uploadFile.get().asFile).build())
                    .build()
            def deploymentId = httpclient.execute(httpPost, response -> {
                def responseBody = EntityUtils.toString(response.getEntity())

                if (response.getCode() != 201) {
                    throw new RuntimeException("Response status: ${response.getCode()}, Response body: ${responseBody}")
                } else {
                    logger.info("Response status: ${response.getCode()}, Response body: ${responseBody}")
                    return responseBody
                }
            })

            def count = 0
            while (count < 5) {
                httpPost = ClassicRequestBuilder.post(statusUrl + deploymentId)
                        .setHeader('Authorization', "Bearer ${uploadToken}")
                        .build()
                def deploymentState = httpclient.execute(httpPost, response -> {
                    def responseBody = EntityUtils.toString(response.getEntity())

                    if (response.getCode() != 200) {
                        throw new RuntimeException("Response status: ${response.getCode()}, Response body: ${responseBody}")
                    } else {
                        def jsonObject = new JsonSlurper().parseText(responseBody)

                        if (jsonObject.deploymentState == 'FAILED') {
                            throw new RuntimeException("Upload status: ${jsonObject.deploymentState}, Response body: ${responseBody}")
                        } else {
                            println("Upload status: ${jsonObject.deploymentState}, Response body: ${responseBody}")
                            return jsonObject.deploymentState
                        }
                    }
                })

                if (deploymentState == 'PUBLISHING' || deploymentState == 'PUBLISHED') {
                    logger.info("Upload file success!")
                    println("Upload file success, current status: ${deploymentState}")
                    return
                } else {
                    count++
                    Thread.sleep(5000)
                }
            }
        }
    }
}

tasks.register('repoZip', Zip) {
    def repoDir = version.endsWith('SNAPSHOT') ? 'repos/snapshots' : 'repos/releases'
    from layout.buildDirectory.dir(repoDir)
    //exclude '**/*.asc.*'
}

tasks.register('uploadToCentralPortal', UploadToCentralPortal) {
    dependsOn repoZip

    uploadFile = repoZip.archiveFile
}